" Cribbed from various, including:
" - Tommy MacWilliam (https://github.com/tmacwill/vimrc)
" - shapeshed (https://github.com/shapeshed/dotfiles/vimrc)
" - junegunn (https://github.com/junegunn/dotfiles/vimrc)

set nocompatible                 " Vim defaults, not vi compatible

let mapleader = ","
let g:netrw_banner = 0           " Disable banner in file browser

call plug#begin()
Plug 'junegunn/fzf', { 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary.vim'
Plug 'tpope/vim-fugitive.vim'
Plug 'tpope/vim-sensible.vim'
Plug 'vim-airline/vim-airline.vim'
call plug#end()

set autoindent                   " Copy indent from current line on <CR>
set background=dark              " Set dark background
set belloff=all                  " Silence terminal bell
set cursorline                   " Highlight cursor line
set encoding=utf-8               " UTF-8 everything
set expandtab                    " Expand tabs to spaces
set guifont=Inconsolata-dz:h15   " Font to use in GUI versions
set ignorecase                   " Ignore case when searching
set incsearch                    " Show incremental matches while typing
set linebreak
set nobackup                     " Disable backups
set nohidden                     " Close buffer when tab closed
set noswapfile                   " No swapfiles
set nowritebackup                " Disable backups
set number                       " Show line numbers
set numberwidth=4
set scrolloff=5                  " Keep 5 lines below the cursor
set shiftwidth=4                 " Number of spaces to use for auto-indent
set showtabline=2                " Always show tab line to avoid resizing
set smartcase                    " Override 'ignorecase' if search has uppercase
set smartindent
set smarttab
set softtabstop=4                " Number of tabs that a <Tab> counts for
set tabpagemax=25                " 10 tabs is far too few
set tabstop=4
set wildignore+=.git             " Ignore .git/ in completions
set wildmenu                     " Enable command-line completion
set wrap                         " Wrap long lines

colorscheme smyck

" ; is better than :
nnoremap ; :

" kj is better than <Esc> or <C-c>
inoremap kj <Esc>

" More logical vertical navigation with lines that wrap
nnoremap <silent> k gk
nnoremap <silent> j gj

" Make it easier to work with splits
nnoremap <leader>s :vsplit<CR>
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Make it easier to work with tabs
nnoremap <leader>t :tabnew<CR>
nnoremap <leader>w :tabclose<CR>
nnoremap <Tab> :tabnext<CR>
nnoremap <S-Tab> :tabprevious<CR>

" Move current line down 1 (-) or up 1 (_)
nnoremap - yypkDj
nnoremap _ yykkpdddd

" Make current word all uppercase
nnoremap <C-u> viwU
inoremap <C-u> <Esc>viwUea

" Fast editing and sourcing of this file
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" Make double-<Esc> clear search highlights
nnoremap <silent> <Esc><Esc> <Esc>:nohlsearch<CR><Esc>

" Fix typos
iabbrev adn and
iabbrev waht what
iabbrev tehn then

" Shortcuts
iabbrev @@ natehardison@gmail.com


" Transparent editing of GnuPG-encrypted files
" Based on a solution by Wouter Hanegraaff
" Pulled from Sef Kloninger: https://github.com/sefk/sef-dotfiles
augroup encrypted
  au!

  " First make sure nothing is written to ~/.viminfo while editing
  " an encrypted file.
  autocmd BufReadPre,FileReadPre *.gpg,*.asc set viminfo=
  " We don't want a swap file, as it writes unencrypted data to disk.
  autocmd BufReadPre,FileReadPre *.gpg,*.asc set noswapfile
  " Switch to binary mode to read the encrypted file.
  autocmd BufReadPre,FileReadPre *.gpg set bin
  autocmd BufReadPre,FileReadPre *.gpg,*.asc let ch_save = &ch|set ch=2
  autocmd BufReadPost,FileReadPost *.gpg,*.asc
    \ '[,']!sh -c 'gpg --decrypt 2> /dev/null'
  " Switch to normal mode for editing
  autocmd BufReadPost,FileReadPost *.gpg set nobin
  autocmd BufReadPost,FileReadPost *.gpg,*.asc let &ch = ch_save|unlet ch_save
  autocmd BufReadPost,FileReadPost *.gpg,*.asc
    \ execute ":doautocmd BufReadPost " . expand("%:r")

  " Convert all text to encrypted text before writing
  autocmd BufWritePre,FileWritePre *.gpg set bin
  autocmd BufWritePre,FileWritePre *.gpg
    \ '[,']!sh -c 'gpg --default-recipient-self -e 2>/dev/null'
  autocmd BufWritePre,FileWritePre *.asc
    \ '[,']!sh -c 'gpg --default-recipient-self -e -a 2>/dev/null'
  " Undo the encryption so we are back in the normal text, directly
  " after the file has been written.
  autocmd BufWritePost,FileWritePost *.gpg,*.asc u
augroup END
