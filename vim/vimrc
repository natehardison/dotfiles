" Cribbed from various, including:
" - Tommy MacWilliam (https://github.com/tmacwill/vimrc)
" - shapeshed (https://github.com/shapeshed/dotfiles/vimrc)
" - junegunn (https://github.com/junegunn/dotfiles/vimrc)

set nocompatible                 " Vim defaults, not vi compatible

let mapleader = ","

call plug#begin()
" basic vim configuration
Plug 'tpope/vim-sensible'

" navigation plugins
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'ludovicchabant/vim-gutentags'
Plug 'preservim/tagbar'
Plug 'christoomey/vim-tmux-navigator'

" editing
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'

" git plugins
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" colors and statusline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'hukl/Smyck-Color-Scheme'
Plug 'jnurmine/Zenburn'

" language support
Plug 'sheerun/vim-polyglot'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'davidhalter/jedi-vim'
call plug#end()

set autoindent                   " Copy indent from current line on <CR>
set background=dark              " Set dark background
set belloff=all                  " Silence terminal bell
set cursorline                   " Highlight cursor line
set encoding=utf-8               " UTF-8 everything
set expandtab                    " Expand tabs to spaces
set hlsearch                     " Highlight search matches
set ignorecase                   " Ignore case when searching
set incsearch                    " Show incremental matches while typing
set linebreak
set nobackup                     " Disable backups
set nohidden                     " Close buffer when tab closed
set noswapfile                   " No swapfiles
set nowritebackup                " Disable backups
set number                       " Show line numbers
set numberwidth=4
set scrolloff=5                  " Keep 5 lines below the cursor
set shiftwidth=4                 " Number of spaces to use for auto-indent
set showtabline=2                " Always show tab line to avoid resizing
set signcolumn=yes
set smartcase                    " Override 'ignorecase' if search has uppercase
set smartindent
set smarttab
set softtabstop=4                " Number of tabs that a <Tab> counts for
set tabstop=4
set updatetime=300               " Speed up updates (default 4000ms)
set wildignore+=.git,.mypy_cache " Ignore .git/ in completions
set wildmenu                     " Enable command-line completion
set whichwrap+=hl                " Allow h / l to wrap to prev / next line
set wrap                         " Wrap long lines

colorscheme zenburn
let g:airline_theme = 'zenburn'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#whitespace#enabled = 1

" needed in zenburn to show completion menu highlights
highlight! link CocPumMenu Pmenu
highlight! link CocMenuSel PmenuSel

let g:coc_global_extensions = [
  \ '@yaegassy/coc-ansible',
  \ 'coc-cmake',
  \ 'coc-jedi',
  \ 'coc-json',
  \ 'coc-git',
  \ 'coc-pyright'
\]

let g:coc_filetype_map = {
  \ 'yaml.ansible': 'ansible',
\}

let g:gutentags_cache_dir = '~/.tags'

let g:jedi#completions_enabled = 0

let g:python_highlight_all = 1

" ; is better than :
nnoremap ; :

" kj is better than <Esc> or <C-c>
cnoremap kj <C-c>
inoremap kj <Esc>
xnoremap kj <Esc>

" Make Y behave like other capitals
nnoremap Y y$

" More logical vertical navigation with lines that wrap
nnoremap <silent> k gk
nnoremap <silent> j gj

" Make it easier to work with windows
nnoremap <leader>s :vsplit<CR>
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
map <C-r> <C-W>r
nnoremap <Tab> <C-W>w
nnoremap <S-Tab> <C-W>W

" Make it easier to work with buffers
nmap <leader>b :Buffers<CR>
nnoremap ]b :bnext<CR>
nnoremap [b :bprev<CR>
nnoremap <leader>w :bd<CR>

" Reload current file
nnoremap <leader>r :e<CR>

" Quick searching with fzf
nnoremap <leader>e :GFiles<CR>
nnoremap <leader>f :Rg<CR>

" Open Git
nnoremap <leader>g :Git<CR>

" Toggle the NERDtree
nnoremap <leader>n :NERDTreeToggle<CR>

" Make it easier to work with tags
nnoremap <leader>t :TagbarToggle f<CR>
nnoremap <C-]> g<C-]>
nnoremap g] g<C-]>
nnoremap ]g :tnext<CR>
nnoremap [g :pop<CR>

" Open help in a vertical split to the left
cabbrev h vert help
cabbrev help vert help

" Move current line down 1 (-) or up 1 (_)
nnoremap - yypkDj
nnoremap _ yykkpdddd

" Make current word all uppercase
nnoremap <C-u> viwU
inoremap <C-u> <Esc>viwUea

" Fast editing and sourcing of this file
nnoremap <leader>ev :enew<CR>:e $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

" Make // search current selection in visual mode
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>

" Make double-<Esc> clear search highlights
nnoremap <silent> <Esc><Esc> <Esc>:nohlsearch<CR><Esc>

" Format Entire File
nnoremap fef ggvG=

" Fix typos
iabbrev adn and
iabbrev waht what
iabbrev tehn then

" Shortcuts
iabbrev @@ natehardison@gmail.com

" Transparent editing of GnuPG-encrypted files
" Based on a solution by Wouter Hanegraaff
" Pulled from Sef Kloninger: https://github.com/sefk/sef-dotfiles
augroup encrypted
  au!

  " First make sure nothing is written to ~/.viminfo while editing
  " an encrypted file.
  autocmd BufReadPre,FileReadPre *.gpg,*.asc set viminfo=
  " We don't want a swap file, as it writes unencrypted data to disk.
  autocmd BufReadPre,FileReadPre *.gpg,*.asc set noswapfile
  " Switch to binary mode to read the encrypted file.
  autocmd BufReadPre,FileReadPre *.gpg set bin
  autocmd BufReadPre,FileReadPre *.gpg,*.asc let ch_save = &ch|set ch=2
  autocmd BufReadPost,FileReadPost *.gpg,*.asc
    \ '[,']!sh -c 'gpg --decrypt 2> /dev/null'
  " Switch to normal mode for editing
  autocmd BufReadPost,FileReadPost *.gpg set nobin
  autocmd BufReadPost,FileReadPost *.gpg,*.asc let &ch = ch_save|unlet ch_save
  autocmd BufReadPost,FileReadPost *.gpg,*.asc
    \ execute ":doautocmd BufReadPost " . expand("%:r")

  " Convert all text to encrypted text before writing
  autocmd BufWritePre,FileWritePre *.gpg set bin
  autocmd BufWritePre,FileWritePre *.gpg
    \ '[,']!sh -c 'gpg --default-recipient-self -e 2>/dev/null'
  autocmd BufWritePre,FileWritePre *.asc
    \ '[,']!sh -c 'gpg --default-recipient-self -e -a 2>/dev/null'
  " Undo the encryption so we are back in the normal text, directly
  " after the file has been written.
  autocmd BufWritePost,FileWritePost *.gpg,*.asc u
augroup END

" Turn on line wrapping for markdown files
augroup Markdown
  autocmd!
  autocmd FileType markdown set textwidth=80
augroup END

" Completions
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" Insert <tab> when previous text is space, refresh completion if not.
inoremap <silent><expr> <TAB>
    \ coc#pum#visible() ? coc#pum#next(1):
    \ CheckBackspace() ? "\<Tab>" :
    \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

inoremap <expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<CR>"
